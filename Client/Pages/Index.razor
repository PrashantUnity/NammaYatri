@page "/"
@inject CurrentContextData context
@inject HttpClient http
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text;
@using System.Net.Mime;
<PageTitle>Index</PageTitle>
<SearchComponent ParentCaller="FetchAvailableVehicle"></SearchComponent>
@if (availableVehicles != null)
{
	<div class="container">
		<div class="row">
			@foreach (var i in availableVehicles)
			{
				<VehicleComponent availableVehicle="@i" searchVechile="@search" OrderedVehicle="ReserveVehicle" />
			}
		</div>
	</div>  						
}

@code {
	private IEnumerable<AvailableVehicle>? availableVehicles;
	private SearchVehicle search;

	public async void FetchAvailableVehicle(SearchVehicle searchVehicle)
	{
		search = searchVehicle;
		//availableVehicles = await context.GetAvailableVehiclesAsync(searchVehicle) ;
		//availableVehicles = await http.GetFromJsonAsync<AvailableVehicle[]>($"api/Search/{searchVehicle}");
		//api gatway is Screwing up with me so i approached this way 
		// litte bit hack but not good way to approach
		var tempPatch = $"https://localhost:7237/api/Search";
		var result = await http.PostAsJsonAsync(tempPatch,searchVehicle);
		availableVehicles = await http.GetFromJsonAsync<AvailableVehicle[]>(tempPatch);
	}
	public async  void ReserveVehicle(Order order)
	{
		var tempPatch = "https://localhost:7237/api/Orders";
		var result = await http.PostAsJsonAsync(tempPatch,order);
	}
	IEnumerable<AvailableVehicle> GetHelper(SearchVehicle searchVehicle)
	{
		var json = JsonSerializer.Serialize(searchVehicle);
		var request = new HttpRequestMessage
			{
				Method = HttpMethod.Get,
				RequestUri = new Uri("https://localhost:7237/api/SearchVehicle"),

				Content = new StringContent(json, Encoding.UTF8, MediaTypeNames.Application.Json)
			};

		var response = http.SendAsync(request).ConfigureAwait(false);

		var responseInfo = response.GetAwaiter().GetResult();
		return null;
	}
} 
